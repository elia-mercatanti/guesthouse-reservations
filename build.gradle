/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.8.3/userguide/building_java_projects.html
 */

plugins {
    // Apply the application plugin to add support for building an application in Java.
    id 'application'
    
    // Apply PIT plugin to perform mutation testing.
    id 'info.solidsoft.pitest' version "${pitPluginVersion}"
    
    // Apply JaCoCo plugin to generate code coverage.
    id 'jacoco'
    
    // Apply Coveralls plugin to send coverage data to coveralls.io.
    id 'com.github.nbaztec.coveralls-jacoco' version "${coverallsPluginVersion}"
    
	// Apply SonarQube plugin to analyze the project with SonarCloud.
    id 'org.sonarqube' version "${sonarQubePluginVersion}"
    
    // Plugin for generating fatjars, add shadowJar task to manage that.
    id 'com.github.johnrengelman.shadow' version "${fatjarPluginVersion}"
    
    // Plugin that provides a task to determine which dependencies have updates.
    id "com.github.ben-manes.versions" version "${gradleVersionsPluginVersion}"
}

// Group, version, description and main class of the project.
group = 'com.eliamercatanti'
version = '0.0.1-SNAPSHOT'
description = 'Project for ATTSD Course - Simple app to manage reservations of a guesthouse'
mainClassName = 'com.eliamercatanti.guesthousebooking.app.swing.GuesthouseSwingApp'

java {
	// Set Java version for building the project. Setup all compile and test tasks to use the defined toolchain.
    toolchain {
        languageVersion = JavaLanguageVersion.of(8)
    }
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit 5 Jupiter API and Engine for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter-api:' + junitJupiterApiVersion
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:' + junitJupiterEngineVersion
    
    // Use JUnit 4 for GUI tests.
    testCompileOnly 'junit:junit:' + junit4Version
    testRuntimeOnly 'org.junit.vintage:junit-vintage-engine:' + junitVintageEngineVersion
    
    // Use Mockito with JUnit 5 for mocking during tests.
    testImplementation 'org.mockito:mockito-junit-jupiter:' + mockitoVersion  
    
    // Use AssertJ and Swing for for fluent style testing and GUI tests.
    testImplementation 'org.assertj:assertj-swing-junit:' + assertJSwingVersion
}

// Jar task configurations.
jar {
	// Generate a jar file with main java class in the MANIFEST. Inherited by shadowJar task.
    manifest {
        attributes 'Main-Class': mainClassName
    }
}

// Test task configurationsm.
test {
    // Use Junit 5 for tests.
    useJUnitPlatform()
}

// PIT mutation testing plugin configurations.
pitest {
    junit5PluginVersion = '0.12'
    mutators = ['STRONGER']
    mutationThreshold = 80
    excludedClasses = ['**.app.**', '**.model.**', '**.swing.**']
    excludedTestClasses = ['**.swing.**']
}

// Jacoco plugin configurations.
jacocoTestReport {
    // Generate html and xml Jacoco report.
    reports {
        xml.enabled = true 
        html.enabled = true
    }
    
    // Exclude some classes from tests.
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: ['**/model/**', '**/app/**'])
        }))
    }
}

// SonarQube plugin configurations.
sonarqube {
	properties {
		// Properties for project configuration.
		property 'sonar.projectKey', 'elia-mercatanti_guesthouse-reservations'
	    property 'sonar.organization', 'elia-mercatanti'
	    property 'sonar.host.url', 'https://sonarcloud.io'
	    
	    // Property for excluding some classes from code coverage.
	    property 'sonar.coverage.exclusions', ['**/model/**', '**/app/**']
	    
	    // Properties for ignoring some code issues.
	    property 'sonar.issue.ignore.multicriteria', 'e11'
	    property 'sonar.issue.ignore.multicriteria.e11.ruleKey', 'java:S110'
	    property 'sonar.issue.ignore.multicriteria.e11.resourceKey', '**/GuesthouseSwingView.java'
	    property 'sonar.issue.ignore.multicriteria', 'e12'
	    property 'sonar.issue.ignore.multicriteria.e12.ruleKey', 'java:S2699'
	    property 'sonar.issue.ignore.multicriteria.e12.resourceKey', '**/GuesthouseSwingViewTest.java'
	}
}

// Application plugin configurations.
application {
    // Define the main class for the application, for run task.
    mainClass = 'com.eliamercatanti.guesthousebooking.app.swing.GuesthouseSwingApp'
}
