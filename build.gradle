/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.8.3/userguide/building_java_projects.html
 */

plugins {
    // Apply the application plugin to add support for building an application in Java.
    id 'application'
    
    // Apply PIT plugin to perform mutation testing.
    id 'info.solidsoft.pitest' version "${pitPluginVersion}"
    
    // Apply JaCoCo plugin to generate code coverage.
    id 'jacoco'
    
    // Apply Coveralls plugin to send coverage data to coveralls.io.
    id 'com.github.nbaztec.coveralls-jacoco' version "${coverallsPluginVersion}"
    
	// Apply SonarQube plugin to analyze the project with SonarCloud.
    id 'org.sonarqube' version "${sonarQubePluginVersion}"
    
    // Plugin for generating fatjars, add shadowJar task to manage that.
    id 'com.github.johnrengelman.shadow' version "${fatjarPluginVersion}"
    
    // Plugin that provides a task to determine which dependencies have updates.
    id "com.github.ben-manes.versions" version "${gradleVersionsPluginVersion}"
    
    // Plugin that allows specifying test sets.
    id 'org.unbroken-dome.test-sets' version "${testSetsPluginVersion}"
    
    // Plugin that allows managing Docker images and containers.
    id 'com.bmuschko.docker-remote-api' version "${gradleDockerPluginVersion}"
}

// Group, version, description and main class of the project.
group = 'com.eliamercatanti'
version = '0.0.1-SNAPSHOT'
description = 'Project for ATTSD Course - Simple app to manage reservations of a guesthouse'
mainClassName = 'com.eliamercatanti.guesthousebooking.app.swing.GuesthouseSwingApp'

// Java configurations.
java {
	// Set Java version for building the project. Setup all compile and test tasks to use the defined toolchain.
    toolchain {
        languageVersion = JavaLanguageVersion.of(8)
    }
}

// Repositories declarations for resolving dependencies.
repositories {
    // Use Maven Central.
    mavenCentral()
}

// Dependencies declarations.
dependencies {
    // Use JUnit 5 Jupiter API and Engine for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter-api:' + junitJupiterApiVersion
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:' + junitJupiterEngineVersion
    
    // Use Mockito with JUnit 5 for mocking during tests.
    testImplementation 'org.mockito:mockito-junit-jupiter:' + mockitoVersion
    
    // Use AssertJ and Swing for fluent style testing and GUI tests.
    testImplementation 'org.assertj:assertj-swing-junit:' + assertJSwingVersion
    
    // Use MongoDB Java Server, fake implementation of the core MongoDB server, for unit tests.
    testImplementation 'de.bwaldvogel:mongo-java-server:' + mongoDBJavaServerVersion
    
    // Use MongoDB Java Driver for managing a MongoDB database.
    implementation 'org.mongodb:mongodb-driver-legacy:' + mongoDBJavaDriverVersion
    
    // Use Logback Classic Module to see Mongo Java Driver logs.
    testImplementation 'ch.qos.logback:logback-classic:' + logbackClassicVersion
}

// Tasks for managing the creation, start and stop of the MongoDB container.
import com.bmuschko.gradle.docker.tasks.image.DockerPullImage
import com.bmuschko.gradle.docker.tasks.container.DockerCreateContainer
import com.bmuschko.gradle.docker.tasks.container.DockerStartContainer
import com.bmuschko.gradle.docker.tasks.container.DockerStopContainer
import com.bmuschko.gradle.docker.tasks.container.extras.DockerWaitHealthyContainer

task pullImage(type: DockerPullImage) {
    image = 'mongo:4.4.5'
}

task createContainer(type: DockerCreateContainer) {
	dependsOn pullImage
    targetImageId('mongo:4.4.5')
    hostConfig.portBindings = ['27017:27017']
    hostConfig.autoRemove = true
}

task startContainer(type: DockerStartContainer) {
    dependsOn createContainer
    targetContainerId(createContainer.containerId)
}

task startAndWaitOnHealthyContainer(type: DockerWaitHealthyContainer) {
    dependsOn startContainer
    awaitStatusTimeout = 60
    targetContainerId(createContainer.containerId)
}

task stopContainer(type: DockerStopContainer) {
    targetContainerId(createContainer.containerId)
}

// Add a new source set, dependency configurations and tasks to the build for integration tests.
testSets {
	integrationTest { dirName = 'it' }
}

// Ensure that integration tests are run before the check task but after unit test.
check.dependsOn integrationTest
integrationTest.mustRunAfter test

// Ensure that integration tests are run after container is healthy and are ended with a container stop.
integrationTest {
    dependsOn startAndWaitOnHealthyContainer
    finalizedBy stopContainer
}

// Test type tasks configuration.
tasks.withType(Test){
	// Use JUnit 5.
	useJUnitPlatform()
}

// PIT mutation testing plugin configurations.
pitest {
    junit5PluginVersion = '0.12'
    mutators = ['STRONGER']
    mutationThreshold = 80
    excludedClasses = ['**.app.**', '**.model.**', '**.swing.**']
    excludedTestClasses = ['**.swing.**']
}

// Jacoco plugin configurations.
jacocoTestReport {
    // Generate html and xml Jacoco report.
    reports {
        xml.enabled = true 
        html.enabled = true
    }
    
    // Exclude some classes from jacoco report.
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: ['**/model/**', '**/app/**'])
        }))
    }
}

// SonarQube plugin configurations.
sonarqube {
	properties {
		// Properties for project configuration.
		property 'sonar.projectKey', 'elia-mercatanti_guesthouse-reservations'
	    property 'sonar.organization', 'elia-mercatanti'
	    property 'sonar.host.url', 'https://sonarcloud.io'
	    
	    // Property for excluding some classes from code coverage.
	    property 'sonar.coverage.exclusions', ['**/model/**', '**/app/**']
	    
	    // Properties for ignoring some code issues.
	    property 'sonar.issue.ignore.multicriteria', 'e11'
	    property 'sonar.issue.ignore.multicriteria.e11.ruleKey', 'java:S110'
	    property 'sonar.issue.ignore.multicriteria.e11.resourceKey', '**/GuesthouseSwingView.java'
	    property 'sonar.issue.ignore.multicriteria', 'e12'
	    property 'sonar.issue.ignore.multicriteria.e12.ruleKey', 'java:S2699'
	    property 'sonar.issue.ignore.multicriteria.e12.resourceKey', '**/GuesthouseSwingViewTest.java'
	}
}

// Jar task configurations.
jar {
	// Generate a jar file with main java class in the MANIFEST. Inherited by shadowJar task.
    manifest {
        attributes 'Main-Class': mainClassName
    }
}

// Application plugin configurations.
application {
    // Define the main class for the application, for run task.
    mainClass = 'com.eliamercatanti.guesthousebooking.app.swing.GuesthouseSwingApp'
}
