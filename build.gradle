/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.8.3/userguide/building_java_projects.html
 */

plugins {
    // Apply the application plugin to add support for building an application in Java.
    id 'application'
    
    // Apply PIT plugin to perform mutation testing.
    id 'info.solidsoft.pitest' version "${pitPluginVersion}"
    
    // Apply JaCoCo plugin to generate code coverage.
    id 'jacoco'
    
    // Apply Coveralls plugin to send coverage data to coveralls.io.
    id 'com.github.nbaztec.coveralls-jacoco' version "${coverallsPluginVersion}"
    
	// Apply SonarQube plugin to analyze the project with SonarCloud.
    id 'org.sonarqube' version "${sonarQubePluginVersion}"
    
    // Plugin for generating fatjars, add shadowJar task to manage that.
    id 'com.github.johnrengelman.shadow' version "${fatjarPluginVersion}"
}

// Group, version, description and main class of the project.
group = "com.eliamercatanti"
version = '0.0.1-SNAPSHOT'
description = 'Project for ATTSD Course - Simple app to manage reservations of a guesthouse'
mainClassName = 'com.eliamercatanti.guesthousebooking.app.App'

java {
	// Set Java version for building the project. Setup all compile and test tasks to use the defined toolchain.
    toolchain {
        languageVersion = JavaLanguageVersion.of(11)
    }
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit Jupiter API for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter-api:' + junitJupiterApiVersion

    // Use JUnit Jupiter Engine for testing.
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:' + junitJupiterEngineVersion
    
    // Use AssertJ for fluent style testing.
    testCompile "org.assertj:assertj-core:" + assertJVersion
    
    // Use Mockito with JUnit 5 for mocking during tests.
    testCompile "org.mockito:mockito-junit-jupiter:" + mockitoVersion
}

// Jar task configurations.
jar {
	// Generate a jar file with main java class in the MANIFEST. Inherited by shadowJar task.
    manifest {
        attributes 'Main-Class': mainClassName
    }
}

// Test task configurationsm.
test {
    // Use junit platform for unit tests.
    useJUnitPlatform()
}

// PIT mutation testing plugin configurations.
pitest {
    junit5PluginVersion = '0.12'
    mutators = ["STRONGER"]
    mutationThreshold = 0
    excludedClasses = ['**.app.**', '**.model.**', '**.repository.**']
}

// Jacoco plugin configurations.
jacocoTestReport {
    // Generate html and xml Jacoco report.
    reports {
        xml.enabled = true 
        html.enabled = true
    }
    
    // Exclude some classes from tests.
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: ['**/model/**', '**/app/**'])
        }))
    }
}

// SonarQube plugin configurations.
sonarqube {
	properties {
		//Properties for project configuration.
		property "sonar.projectKey", "elia-mercatanti_guesthouse-reservations"
	    property "sonar.organization", "elia-mercatanti"
	    property "sonar.host.url", "https://sonarcloud.io"
	    
	    //Property for excluding some classes from code coverage.
	    property 'sonar.coverage.exclusions', ['**/model/**', '**/app/**']
	}
}

// Application plugin configurations.
application {
    // Define the main class for the application, for run task.
    mainClass = mainClassName
}
